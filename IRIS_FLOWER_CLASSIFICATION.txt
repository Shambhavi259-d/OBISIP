
Shambhavi Dattatray Kulkarni
Task 1 : 
IRIS FLOWER CLASSIFICATION

import pandas as pd
import numpy as np
import pandas as pd
import numpy as np
ds = pd.read_csv('Iris.csv')
​
​
ds.head()
Id	SepalLengthCm	SepalWidthCm	PetalLengthCm	PetalWidthCm	Species
0	1	5.1	3.5	1.4	0.2	Iris-setosa
1	2	4.9	3.0	1.4	0.2	Iris-setosa
2	3	4.7	3.2	1.3	0.2	Iris-setosa
3	4	4.6	3.1	1.5	0.2	Iris-setosa
4	5	5.0	3.6	1.4	0.2	Iris-setosa
ds.describe()
Id	SepalLengthCm	SepalWidthCm	PetalLengthCm	PetalWidthCm
count	150.000000	150.000000	150.000000	150.000000	150.000000
mean	75.500000	5.843333	3.054000	3.758667	1.198667
std	43.445368	0.828066	0.433594	1.764420	0.763161
min	1.000000	4.300000	2.000000	1.000000	0.100000
25%	38.250000	5.100000	2.800000	1.600000	0.300000
50%	75.500000	5.800000	3.000000	4.350000	1.300000
75%	112.750000	6.400000	3.300000	5.100000	1.800000
max	150.000000	7.900000	4.400000	6.900000	2.500000
ds.isnull().sum()
Id               0
SepalLengthCm    0
SepalWidthCm     0
PetalLengthCm    0
PetalWidthCm     0
Species          0
dtype: int64
x=ds.iloc[:,1:5].values
y=ds.iloc[:,5].values
from sklearn.preprocessing import LabelEncoder
labelEnc_y = LabelEncoder()
y = labelEnc_y.fit_transform(y)
y
y
array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], dtype=int64)
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.2)
from sklearn.linear_model import LogisticRegression
logM = LogisticRegression()
logM.fit(x_train,y_train)
LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
          intercept_scaling=1, max_iter=100, multi_class='ovr', n_jobs=1,
          penalty='l2', random_state=None, solver='liblinear', tol=0.0001,
          verbose=0, warm_start=False)
y_P = logM.predict(x_test)
y_P
y_P
array([0, 0, 1, 2, 1, 2, 1, 2, 0, 1, 0, 2, 0, 2, 1, 1, 1, 2, 0, 0, 0, 1,
       1, 0, 1, 2, 0, 1, 1, 0], dtype=int64)
y_test
y_test
array([0, 0, 1, 2, 1, 2, 1, 2, 0, 1, 0, 2, 0, 2, 1, 1, 1, 2, 0, 0, 0, 1,
       1, 0, 1, 2, 0, 1, 1, 0], dtype=int64)
from sklearn.metrics import confusion_matrix,accuracy_score
confusion_matrix(y_test,y_P)
array([[11,  0,  0],
       [ 0, 12,  0],
       [ 0,  0,  7]], dtype=int64)
30/30
30/30
1.0
​
